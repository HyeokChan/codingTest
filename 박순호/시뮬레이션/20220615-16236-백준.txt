import collections

N = int(input())
maps = [[0 for i in range(N)] for i in range(N)]
for i in range(N):
    inputs = list(map(int, input().split(' ')))
    for j in range(N):
        maps[i][j] = inputs[j]
        if inputs[j] == 9:
            maps[i][j] = 0
            start_x = i
            start_y = j



# 상하좌우
dic = {0:[-1, 0], 1:[1, 0], 2:[0, -1], 3:[0, 1]}

fishSize = 2
eated = 0
moving = 0

while True:
    # 시작점
    q = collections.deque([[start_x, start_y]])

    # 각 위치까지의 최단거리 테이블
    visited = [[-1 for i in range(N)] for i in range(N)]
    visited[start_x][start_y] = 0

    # 최단거리 구하기
    while q:
        x, y = q.popleft()
        for i in range(4):
            nx = x + dic[i][0]
            ny = y + dic[i][1]
            if 0 <= nx < N and 0 <= ny < N and visited[nx][ny] == -1:
                if maps[nx][ny] <= fishSize:
                    visited[nx][ny] = visited[x][y] + 1
                    q.append([nx, ny])

    MIN = 99999999
    min_a = 0
    min_b = 0
    # 최단거리의 먹을 수 있는 먹이 구하기
    for a in range(N):
        for b in range(N):
            if visited[a][b] != -1 and 1 <= visited[a][b]:
                if 0 < maps[a][b] < fishSize:
                    if visited[a][b] < MIN:
                        min_a = a               
                        min_b = b
                        MIN = visited[a][b]
    if MIN != 99999999:
        # 먹은거 정보 입력
        eated += 1
        maps[min_a][min_b] = 0            
        start_x = min_a
        start_y = min_b            
        moving += visited[min_a][min_b]            
        if eated >= fishSize:
            eated = 0
            fishSize += 1
    else:
        break
print(moving)
                    
    
    